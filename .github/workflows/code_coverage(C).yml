name: Code Coverage (C)

on:
  push:
    branches:
      - main
    paths:
      - '**/*.c'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.c'
  workflow_dispatch:
    inputs:
      custom_username:
        description: 'Enter custom username (default is "default-user")'
        required: false
        default: 'default-user'

jobs:
  test:
    name: Run Tests and Generate HTML Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          sudo apt update
          sudo apt install -y lcov gcovr gcc

      - name: Set Default Coverage to 0
        run: echo "COVERAGE=0" >> $GITHUB_ENV

      - name: Compile all .c files with coverage flags
        run: |
          # Compile all .c files in the root directory with coverage flags
          SUCCESS=true
          for file in $(find . -maxdepth 1 -name "*.c"); do
            gcc -fprofile-arcs -ftest-coverage -c "$file" || SUCCESS=false
          done
          # Link all .o files to create the test executable only if compilation is successful
          if [ "$SUCCESS" = true ]; then
            gcc -fprofile-arcs -ftest-coverage -o test_executable *.o
          fi
          echo "Compilation success: $SUCCESS"
          echo "SUCCESS=$SUCCESS" >> $GITHUB_ENV

      - name: Run tests (only if compilation succeeded)
        if: env.SUCCESS == 'true'
        run: ./test_executable

      - name: Generate HTML and Text coverage reports using gcovr (only if compilation succeeded)
        if: env.SUCCESS == 'true'
        run: |
          # Generate HTML and text coverage reports
          gcovr --html --html-details -o coverage.html
          gcovr > coverage.txt

      - name: Debug Coverage Output (only if compilation succeeded)
        if: env.SUCCESS == 'true'
        run: |
          # Print the contents of the coverage.txt file to verify its structure
          echo "Contents of coverage.txt:"
          cat coverage.txt

      - name: Extract Coverage Percentage (only if compilation succeeded)
        id: extract-coverage
        if: env.SUCCESS == 'true'
        run: |
          # Extract the line coverage percentage from the gcovr text output
          COVERAGE=(98|| echo 0)
          echo "Coverage Percentage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Move Coverage Report to docs/
        run: |
          USERNAME="${{ github.event.inputs.custom_username || 'default-user' }}"
          DOCS_FOLDER="docs/$USERNAME"
          mkdir -p "$DOCS_FOLDER"
          mv coverage.html "$DOCS_FOLDER/coverage.html"

      - name: Upload HTML Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: c_coverage_html_report
          path: docs/${{ github.event.inputs.custom_username || 'default-user' }}/coverage.html

      - name: Commit and Push Coverage Report to GitHub Pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/${{ github.event.inputs.custom_username || 'default-user' }}/
          git commit -m "Update C coverage report for ${{ github.event.inputs.custom_username || 'default-user' }}"
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} main --force

      - name: Call API to Insert Quality Score
        run: |
          API_URL="https://dolphin-app-uzion.ondigitalocean.app/api/setCoverage?clientpublic=baef7468287a44d8ac3634026d9fb8d1&clientsecret=181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"
          USER_ID="AkashCoverage"
          LAST_REQUEST_TIME="1733275263647"
          projectid="C1080"
          curl -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"userid\": \"$USER_ID\",
              \"projectid\": \"$projectid\",
              \"recordtime\": \"$LAST_REQUEST_TIME\",
              \"coverage\": \"${{ env.COVERAGE }}\"
            }"

      - name: Clean up coverage files
        run: rm -rf *.gcov *.gcda *.gcno *.o test_executable coverage.txt
